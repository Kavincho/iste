#!/usr/bin/env python3
"""
Script de diagn√≥stico para verificar la configuraci√≥n de Flask y archivos est√°ticos
"""

import os
import sys

def verificar_archivos():
    """Verifica que todos los archivos necesarios existan"""
    print("üîç Verificando archivos...")
    
    archivos_requeridos = [
        'app.py',
        'templates/index.html',
        'templates/test.html',
        'templates/index_simple.html',
        'static/css/style.css',
        'static/js/app.js',
        'database/connection.py',
        'models/usuario.py',
        'models/producto.py',
        'controllers/usuario_controller.py',
        'controllers/producto_controller.py'
    ]
    
    archivos_faltantes = []
    for archivo in archivos_requeridos:
        if os.path.exists(archivo):
            print(f"‚úÖ {archivo}")
        else:
            print(f"‚ùå {archivo} - NO ENCONTRADO")
            archivos_faltantes.append(archivo)
    
    return len(archivos_faltantes) == 0

def verificar_estructura():
    """Verifica la estructura de directorios"""
    print("\nüìÅ Verificando estructura de directorios...")
    
    directorios = ['templates', 'static', 'static/css', 'static/js', 'models', 'controllers', 'database']
    
    for directorio in directorios:
        if os.path.exists(directorio):
            print(f"‚úÖ {directorio}/")
        else:
            print(f"‚ùå {directorio}/ - NO ENCONTRADO")

def verificar_dependencias():
    """Verifica que las dependencias est√©n instaladas"""
    print("\nüì¶ Verificando dependencias...")
    
    try:
        import flask
        print("‚úÖ Flask")
    except ImportError:
        print("‚ùå Flask no est√° instalado")
        return False
    
    try:
        import flask_cors
        print("‚úÖ Flask-CORS")
    except ImportError:
        print("‚ùå Flask-CORS no est√° instalado")
        return False
    
    try:
        import pymongo
        print("‚úÖ PyMongo")
    except ImportError:
        print("‚ùå PyMongo no est√° instalado")
        return False
    
    try:
        from dotenv import load_dotenv
        print("‚úÖ python-dotenv")
    except ImportError:
        print("‚ùå python-dotenv no est√° instalado")
        return False
    
    return True

def verificar_configuracion_flask():
    """Verifica la configuraci√≥n de Flask"""
    print("\n‚öôÔ∏è Verificando configuraci√≥n de Flask...")
    
    try:
        # Importar la aplicaci√≥n Flask
        sys.path.append('.')
        from app import app
        
        print("‚úÖ Aplicaci√≥n Flask importada correctamente")
        
        # Verificar configuraci√≥n de archivos est√°ticos
        if hasattr(app, 'static_folder'):
            print(f"‚úÖ Carpeta est√°tica configurada: {app.static_folder}")
        else:
            print("‚ùå Carpeta est√°tica no configurada")
        
        if hasattr(app, 'static_url_path'):
            print(f"‚úÖ URL path est√°tico configurado: {app.static_url_path}")
        else:
            print("‚ùå URL path est√°tico no configurado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error al importar aplicaci√≥n Flask: {e}")
        return False

def verificar_contenido_css():
    """Verifica el contenido del archivo CSS"""
    print("\nüé® Verificando archivo CSS...")
    
    try:
        with open('static/css/style.css', 'r', encoding='utf-8') as f:
            contenido = f.read()
            
        if len(contenido) > 0:
            print(f"‚úÖ CSS tiene {len(contenido)} caracteres")
            
            # Verificar algunas clases importantes
            clases_importantes = ['.header', '.navbar', '.hero', '.btn-primary', '.productos-grid']
            for clase in clases_importantes:
                if clase in contenido:
                    print(f"‚úÖ Clase {clase} encontrada")
                else:
                    print(f"‚ö†Ô∏è Clase {clase} no encontrada")
        else:
            print("‚ùå Archivo CSS est√° vac√≠o")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå Error al leer archivo CSS: {e}")
        return False

def verificar_contenido_js():
    """Verifica el contenido del archivo JavaScript"""
    print("\nüîß Verificando archivo JavaScript...")
    
    try:
        with open('static/js/app.js', 'r', encoding='utf-8') as f:
            contenido = f.read()
            
        if len(contenido) > 0:
            print(f"‚úÖ JavaScript tiene {len(contenido)} caracteres")
            
            # Verificar algunas funciones importantes
            funciones_importantes = ['cargarProductos', 'mostrarProductos', 'agregarAlCarrito']
            for funcion in funciones_importantes:
                if funcion in contenido:
                    print(f"‚úÖ Funci√≥n {funcion} encontrada")
                else:
                    print(f"‚ö†Ô∏è Funci√≥n {funcion} no encontrada")
        else:
            print("‚ùå Archivo JavaScript est√° vac√≠o")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå Error al leer archivo JavaScript: {e}")
        return False

def main():
    """Funci√≥n principal del diagn√≥stico"""
    print("üöÄ DIAGN√ìSTICO DE LA APLICACI√ìN FLASK")
    print("=" * 50)
    
    # Ejecutar todas las verificaciones
    archivos_ok = verificar_archivos()
    verificar_estructura()
    dependencias_ok = verificar_dependencias()
    flask_ok = verificar_configuracion_flask()
    css_ok = verificar_contenido_css()
    js_ok = verificar_contenido_js()
    
    # Resumen
    print("\n" + "=" * 50)
    print("üìä RESUMEN DEL DIAGN√ìSTICO")
    print("=" * 50)
    
    if all([archivos_ok, dependencias_ok, flask_ok, css_ok, js_ok]):
        print("üéâ ¬°Todo est√° configurado correctamente!")
        print("\nüìù Pr√≥ximos pasos:")
        print("1. Ejecuta: python app.py")
        print("2. Abre: http://localhost:5000")
        print("3. Para pruebas: http://localhost:5000/test-template")
        print("4. Para versi√≥n simple: http://localhost:5000/simple")
    else:
        print("‚ö†Ô∏è Se encontraron algunos problemas:")
        if not archivos_ok:
            print("- Faltan algunos archivos requeridos")
        if not dependencias_ok:
            print("- Faltan algunas dependencias")
        if not flask_ok:
            print("- Problema con la configuraci√≥n de Flask")
        if not css_ok:
            print("- Problema con el archivo CSS")
        if not js_ok:
            print("- Problema con el archivo JavaScript")
        
        print("\nüîß Soluciones:")
        print("1. Instala dependencias: pip install -r requirements.txt")
        print("2. Verifica que todos los archivos est√©n en su lugar")
        print("3. Reinicia la aplicaci√≥n despu√©s de los cambios")

if __name__ == "__main__":
    main() 